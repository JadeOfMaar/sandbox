@PART[sspx-*]:HAS[@MODULE[ModuleDeployableCentrifuge]]:NEEDS[SnacksStress]
{	
	MODULE
    {
        // This part module is designed to negate one or more preconditions so long as the kerbal resides in the part.
        // An example would be a centrifuge.
        name = SnacksDisqualifier

        //Contains the disqualified preconditions such as CheckGravityLevel.checkLesserOrEqual for low gravity checks. 
        // Separate disqualified preconditions by semicolon.
        // Most of the preconditions can be disqualified simply by stating their name. 
        // If a precondition requires something different, be sure to check its documentation.
        disqualifiedPreconditions = CheckGravityLevel
    }
}

@PART[sspx-observation-*|sspx-cupola-*|sspx-expandable-centrifuge-*]:NEEDS[SnacksStress]
{
	MODULE
	{
		name = SnacksConverter
		ConverterName = Stargazing
		StartActionName = Start Stargazing
		StopActionName = Stop Stargazing
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		
		//At least one crew needs to be in the part to run the converter.
		minimumCrew = 1

		//Connection back home required to receive entertainment.
		requiresHomeConnection = false

		//This condition is set whenever the kerbal enters the part and the converter is active, and
		//when the converter is started. Since it's registered as a SKILL_LOSS_CONDITION, the kerbals will lose their
		//skills while the converter is running.
		conditionSummary = Stargazing

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.05
			FlowMode = STAGE_PRIORITY_FLOW
		}

		//Works like an INPUT_RESOURCE except:
		// It applies to individual kerbals.
		// You can specify an AmountPerDay or AmountPerSecond.
		ROSTER_INPUT_RESOURCE
		{
			ResourceName = Stress

			//AmountPerDay will be translated into: AmountPerDay / seconds per homeworld day
			//This will override AmountPerSecond if it is defined in the node.
			AmountPerDay = 1.5
		}
	}
}